//
// means_gufuncs.c.src
//
// gufunc implementations of:
//     gmean:  geometric mean
//     gmeanw: weighted geometric mean
//     hmean:  harmonic mean
//     hmeanw: weighted harmonic mean
//     pmean:  power mean (aka generalized mean)
//     pmeanw: weight power mean
//



#define PY_SSIZE_T_CLEAN
#include "Python.h"

#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>
#include <math.h>

#define NPY_NO_DEPRECATED_API NPY_API_VERSION
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"

#include "../src/util/ufunc_tools.h"



//
// Only the float, double and long double inner loops are implemented.
//

/**begin repeat
 * #typename      = float, double, longdouble#
 * #ctype_in      = float, double, long double#
 * #ctype_out     = float, double, long double#
 * #funcsuffix    = f, , l#
 */

@ctype_out@ gmean_@typename@_1d(char *arg, const npy_intp n, const npy_intp step)
{
    bool has_zero = false;
    bool has_neg = false;
    bool has_nan = false;
    bool has_inf = false;
    bool all_same = true;

    @ctype_in@ prev;
    @ctype_out@ sumlog = 0;
    for (npy_intp k = 0; k < n; ++k, arg += step) {
        @ctype_in@ x = *(@ctype_in@ *)arg;
        if (k == 0) {
            prev = x;
        }
        all_same &= prev == x;
        if (isnan(x)) {
            has_nan = true;
            break;
        }
        else if (isinf(x)) {
            has_inf = true;
        }
        else if (x == 0) {
            has_zero = true;
        }
        else if (x < 0.0) {
            has_neg = true;
            break;
        }
        else {
            @ctype_out@ logx = log@funcsuffix@(x);
            sumlog += logx;
        }
        prev = x;
    }
    if (has_neg || has_nan || (has_zero && has_inf)) {
        return NPY_NAN;
    }
    else if (has_inf) {
        return NPY_INFINITY;
    }
    else if (has_zero) {
        return 0.0;
    }
    else if (all_same) {
        return prev;
    }
    else {
        return exp@funcsuffix@(sumlog/n);
    }
}

static void gmean_@typename@_loop(char **args, const npy_intp *dimensions,
                                  const npy_intp* steps, void* data)
{
    char *in = args[0];
    char *out = args[1];
    npy_intp in_step = steps[0];
    npy_intp out_step = steps[1];
    npy_intp inner_step = steps[2];

    if (dimensions[1] == 0) {
        NPY_ALLOW_C_API_DEF
        NPY_ALLOW_C_API
        PyErr_SetString(PyExc_ValueError,
                        "gmean requires an input with length at least 1.");
        NPY_DISABLE_C_API
        return;
    }

    for (npy_intp i = 0; i < dimensions[0]; ++i, in += in_step, out += out_step) {
        *(@ctype_out@ *) out = gmean_@typename@_1d(in, dimensions[1], inner_step);
    }
}


@ctype_out@ gmeanw_@typename@_1d(char *arg0, char *arg1, const npy_intp n,
                                 const npy_intp step0, const npy_intp step1)
{
    bool has_zero = false;
    bool has_neg = false;
    bool has_nan = false;
    bool has_inf = false;
    bool all_same = true;

    @ctype_in@ prevx;
    @ctype_out@ sumlog = 0;
    @ctype_out@ sumw = 0;
    for (npy_intp k = 0; k < n; ++k, arg0 += step0, arg1 += step1) {
        @ctype_in@ x = *(@ctype_in@ *)arg0;
        @ctype_in@ w = *(@ctype_in@ *)arg1;
        sumw += w;
        if (k == 0) {
            prevx = x;
        }
        all_same &= prevx == x;
        if (isnan(x)) {
            has_nan = true;
            break;
        }
        else if (isinf(x)) {
            has_inf = true;
        }
        else if (x == 0) {
            has_zero = true;
        }
        else if (x < 0.0) {
            has_neg = true;
            break;
        }
        else {
            @ctype_out@ logx = log@funcsuffix@(x);
            sumlog += w*logx;
        }
        prevx = x;
    }
    if (has_neg || has_nan || (has_zero && has_inf)) {
        return NPY_NAN;
    }
    else if (has_inf) {
        return NPY_INFINITY;
    }
    else if (has_zero) {
        return 0.0;
    }
    else if (all_same) {
        return prevx;
    }
    else if (sumw == 0) {
        return NPY_NAN;
    }
    else {
        return exp@funcsuffix@(sumlog/sumw);
    }
}

static void gmeanw_@typename@_loop(char **args, const npy_intp *dimensions,
                                   const npy_intp* steps, void* data)
{
    char *in0 = args[0];
    char *in1 = args[1];
    char *out = args[2];
    npy_intp in0_step = steps[0];
    npy_intp in1_step = steps[1];
    npy_intp out_step = steps[2];
    npy_intp inner0_step = steps[3];
    npy_intp inner1_step = steps[4];

    if (dimensions[1] == 0) {
        NPY_ALLOW_C_API_DEF
        NPY_ALLOW_C_API
        PyErr_SetString(PyExc_ValueError,
                        "gmeanw requires an input with length at least 1.");
        NPY_DISABLE_C_API
        return;
    }

    for (npy_intp i = 0; i < dimensions[0]; ++i, in0 += in0_step,
                                                 in1 += in1_step,
                                                 out += out_step) {
        *(@ctype_out@ *) out = gmeanw_@typename@_1d(in0, in1, dimensions[1],
                                                    inner0_step, inner1_step);
    }
}


static void hmean_@typename@_loop(char **args, const npy_intp *dimensions,
                                  const npy_intp* steps, void* data)
{
    char *in = args[0];
    char *out = args[1];
    npy_intp in_step = steps[0];
    npy_intp out_step = steps[1];
    npy_intp inner_step = steps[2];

    if (dimensions[1] == 0) {
        NPY_ALLOW_C_API_DEF
        NPY_ALLOW_C_API
        PyErr_SetString(PyExc_ValueError,
                        "hmean requires an input with length at least 1.");
        NPY_DISABLE_C_API
        return;
    }

    for (npy_intp i = 0; i < dimensions[0]; ++i, in += in_step, out += out_step) {
        @ctype_out@ sumrecip = 0;
        char *inner = in;
        for (npy_intp k = 0; k < dimensions[1]; ++k, inner += inner_step) {
            @ctype_in@ x = *(@ctype_in@ *)inner;
            if (x == 0) {
                sumrecip = NPY_INFINITY;
                break;
            }
            sumrecip += 1.0L / x;
        }
        *(@ctype_out@ *) out = dimensions[1] / sumrecip;
    }
}


@ctype_out@ hmeanw_@typename@_1d(char *in0, char *in1, const npy_intp n,
                                 const npy_intp step0, const npy_intp step1)
{
    @ctype_out@ sumw = 0;
    @ctype_out@ sumrecip = 0;
    for (npy_intp k = 0; k < n; ++k, in0 += step0,
                                                 in1 += step1) {
        @ctype_in@ x = *(@ctype_in@ *) in0;
        @ctype_in@ w = *(@ctype_in@ *) in1;
        // XXX/TODO: Handle various combination of inf and nan in x and w...
        if (x == 0) {
            sumrecip = NPY_INFINITY;
            break;
        }
        sumw += w;
        sumrecip += w/x;
    }
    return sumw / sumrecip;
}


//
// Loop function for weighted hmean(x, weights, p)
//
static void hmeanw_@typename@_loop(char **args, const npy_intp *dimensions,
                                   const npy_intp* steps, void* data)
{
    char *in0 = args[0];
    char *in1 = args[1];
    char *out = args[2];
    npy_intp in0_step = steps[0];
    npy_intp in1_step = steps[1];
    npy_intp out_step = steps[2];
    npy_intp inner0_step = steps[3];
    npy_intp inner1_step = steps[4];

    if (dimensions[1] == 0) {
        NPY_ALLOW_C_API_DEF
        NPY_ALLOW_C_API
        PyErr_SetString(PyExc_ValueError,
                        "hmeanw requires an input with length at least 1.");
        NPY_DISABLE_C_API
        return;
    }

    for (npy_intp i = 0; i < dimensions[0]; ++i, in0 += in0_step,
                                                 in1 += in1_step,
                                                 out += out_step) {
        *(@ctype_out@ *) out = hmeanw_@typename@_1d(in0, in1, dimensions[1],
                                                    inner0_step, inner1_step);
    }
}


static void pmean_@typename@_loop(char **args, const npy_intp *dimensions,
                                  const npy_intp* steps, void* data)
{
    char *in0 = args[0];
    char *in1 = args[1];
    char *out = args[2];
    npy_intp in0_step = steps[0];
    npy_intp in1_step = steps[1];
    npy_intp out_step = steps[2];
    npy_intp inner_step = steps[3];

    if (dimensions[1] == 0) {
        NPY_ALLOW_C_API_DEF
        NPY_ALLOW_C_API
        PyErr_SetString(PyExc_ValueError,
                        "pmean requires an input with length at least 1.");
        NPY_DISABLE_C_API
        return;
    }

    for (npy_intp i = 0; i < dimensions[0]; ++i, in0 += in0_step,
                                                 in1 += in1_step,
                                                 out += out_step) {
        bool has_zero = false;
        bool has_neg = false;
        bool has_nan = false;
        bool has_inf = false;

        char *inner = in0;
        @ctype_in@ xmax;
        @ctype_in@ xmin;
        @ctype_out@ p = *(@ctype_in@ *)in1;
        if (isnan(p)) {
            *(@ctype_out@ *) out = NPY_NAN;
            continue;
        }
        // The following threshold for the switch to the small-p case was found
        // by experimenting with an assortment of input arrays.  Usually the
        // value where using the small-p approximation was better was between
        // 1e-6 and 1e-5.  The relative error of the pmean calculation for p
        // around this value was on the order of 1e-12.
        if (fabs@funcsuffix@(p) < 2e-6) {
            // In the limit p == 0, the power mean becomes the geometric mean.
            @ctype_out@ gm = gmean_@typename@_1d(in0, dimensions[1], inner_step);
            if (p != 0) {
                npy_intp n = dimensions[1];
                @ctype_out@ sumlnx = 0;
                @ctype_out@ sumlnx_sq = 0;
                inner = in0;
                for (npy_intp k = 0; k < n; ++k, inner += inner_step) {
                    @ctype_in@ x = *(@ctype_in@ *)inner;
                    @ctype_out@ lnx = log@funcsuffix@(x);
                    sumlnx += lnx;
                    sumlnx_sq += lnx*lnx;
                }
                @ctype_out@ mean_sumlnx = sumlnx/n;
                gm *= 1 + 0.5*p*(sumlnx_sq/n - mean_sumlnx*mean_sumlnx);
            }
            *(@ctype_out@ *) out = gm;
            continue;
        }
        else if (p == -1) {
            // p == -1 is the harmonic mean.
            char *args2[2] = {in0, out};
            npy_intp dims2[2] = {1, dimensions[1]};
            npy_intp steps2[3] = {in0_step, out_step, inner_step};
            hmean_@typename@_loop(args2, dims2, steps2, NULL);
            continue;
        }
        // Get the min and max, and check for nan, inf and negative values.
        for (npy_intp k = 0; k < dimensions[1]; ++k, inner += inner_step) {
            @ctype_in@ x = *(@ctype_in@ *)inner;
            if (isnan(x)) {
                has_nan = true;
                break;
            }
            else if (isinf(x)) {
                has_inf = true;
            }
            if (k == 0 || x > xmax) {
                xmax = x;
            }
            if (k == 0 || x < xmin) {
                xmin = x;
            }
            if (x < 0.0) {
                has_neg = true;
                break;
            }
            if (x == 0) {
                has_zero = true;
            }
        }
        if (has_neg || has_nan) {
            *(@ctype_out@ *) out = NPY_NAN;
            continue;
        }
        if (xmax == xmin) {
            // All the values in x are the same.
            *(@ctype_out@ *) out = xmax;
            continue;
        }
        if (has_inf && p > 0.0) {
            *(@ctype_out@ *) out = NPY_INFINITY;
            continue;
        }
        if (has_zero && p < 0.0) {
            *(@ctype_out@ *) out = 0;
            continue;
        }
        if (isinf(p)) {
            if (p < 0.0) {
                *(@ctype_out@ *) out = xmin;
            }
            else {
                *(@ctype_out@ *) out = xmax;
            }
            continue;
        }

        @ctype_out@ sum = 0;
        inner = in0;
        @ctype_out@ scale = (p > 0) ? xmax : xmin;
        for (npy_intp k = 0; k < dimensions[1]; ++k, inner += inner_step) {
            @ctype_in@ x = *(@ctype_in@ *)inner;
            sum += pow(x/scale, p);
        }
        *(@ctype_out@ *) out = scale*pow(sum/dimensions[1], 1/p);
    }
}


static void pmeanw_@typename@_loop(char **args, const npy_intp *dimensions,
                                   const npy_intp* steps, void* data)
{
    char *in0 = args[0];  // x
    char *in1 = args[1];  // w
    char *in2 = args[2];  // p
    char *out = args[3];
    npy_intp in0_step = steps[0];
    npy_intp in1_step = steps[1];
    npy_intp in2_step = steps[2];
    npy_intp out_step = steps[3];
    npy_intp inner0_step = steps[4];
    npy_intp inner1_step = steps[5];

    if (dimensions[1] == 0) {
        NPY_ALLOW_C_API_DEF
        NPY_ALLOW_C_API
        PyErr_SetString(PyExc_ValueError,
                        "pmean requires an input with length at least 1.");
        NPY_DISABLE_C_API
        return;
    }

    for (npy_intp i = 0; i < dimensions[0]; ++i, in0 += in0_step,
                                                 in1 += in1_step,
                                                 in2 += in2_step,
                                                 out += out_step) {
        bool has_zero = false;
        bool has_neg = false;
        bool has_nan = false;
        bool has_inf = false;

        char *inner0 = in0;
        char *inner1 = in1;
        @ctype_in@ xmax;
        @ctype_in@ xmin;
        @ctype_out@ p = *(@ctype_in@ *)in2;
        if (isnan(p)) {
            *(@ctype_out@ *) out = NPY_NAN;
            continue;
        }
        @ctype_out@ sumw = 0;

        // The following threshold for the switch to the small-p case was found
        // by experimenting with an assortment of input arrays.  Usually the
        // value where using the small-p approximation was better was between
        // 1e-6 and 1e-5.  The relative error of the pmean calculation for p
        // around this value was on the order of 1e-12.
        if (fabs@funcsuffix@(p) < 2e-6) {
            // In the limit p == 0, the power mean becomes the geometric mean.
            @ctype_out@ gm = gmeanw_@typename@_1d(in0, in1, dimensions[1], inner0_step, inner1_step);
            if (p != 0) {
                npy_intp n = dimensions[1];
                @ctype_out@ sumlnx = 0;
                @ctype_out@ sumlnx_sq = 0;
                inner0 = in0;
                inner1 = in1;
                sumw = 0;
                for (npy_intp k = 0; k < n; ++k, inner0 += inner0_step,
                                                 inner1 += inner1_step) {
                    @ctype_in@ x = *(@ctype_in@ *) inner0;
                    @ctype_in@ w = *(@ctype_in@ *) inner1;
                    @ctype_out@ lnx = log@funcsuffix@(x);
                    sumw += w;
                    sumlnx += w*lnx;
                    sumlnx_sq += w*lnx*lnx;
                }
                @ctype_out@ mean_sumlnx = sumlnx/sumw;
                gm *= 1 + 0.5*p*(sumlnx_sq/sumw - mean_sumlnx*mean_sumlnx);
            }
            *(@ctype_out@ *) out = gm;
            continue;
        }
        else if (p == -1) {
            // p == -1 is the harmonic mean.
            *(@ctype_out@ *) out = hmeanw_@typename@_1d(in0, in1, dimensions[1],
                                                        inner0_step, inner1_step);
            continue;
        }
        // Get the min and max, and check for nan, inf and negative values.
        for (npy_intp k = 0; k < dimensions[1]; ++k, inner0 += inner0_step,
                                                     inner1 += inner1_step) {
            @ctype_in@ x = *(@ctype_in@ *) inner0;
            if (isnan(x)) {
                has_nan = true;
                break;
            }
            else if (isinf(x)) {
                has_inf = true;
            }
            if (k == 0 || x > xmax) {
                xmax = x;
            }
            if (k == 0 || x < xmin) {
                xmin = x;
            }
            if (x < 0.0) {
                has_neg = true;
                break;
            }
            if (x == 0) {
                has_zero = true;
            }
        }
        if (has_neg || has_nan) {
            *(@ctype_out@ *) out = NPY_NAN;
            continue;
        }
        if (xmax == xmin) {
            // All the values in x are the same.
            *(@ctype_out@ *) out = xmax;
            continue;
        }
        if (has_inf && p > 0.0) {
            *(@ctype_out@ *) out = NPY_INFINITY;
            continue;
        }
        if (has_zero && p < 0.0) {
            *(@ctype_out@ *) out = 0;
            continue;
        }
        if (isinf(p)) {
            if (p < 0.0) {
                *(@ctype_out@ *) out = xmin;
            }
            else {
                *(@ctype_out@ *) out = xmax;
            }
            continue;
        }

        @ctype_out@ sum = 0;
        sumw = 0;
        inner0 = in0;
        inner1 = in1;
        @ctype_out@ scale = (p > 0) ? xmax : xmin;
        sumw = 0;
        for (npy_intp k = 0; k < dimensions[1]; ++k, inner0 += inner0_step,
                                                     inner1 += inner1_step) {
            @ctype_in@ x = *(@ctype_in@ *) inner0;
            @ctype_in@ w = *(@ctype_in@ *) inner1;
            sumw += w;
            sum += w*pow(x/scale, p);
        }
        *(@ctype_out@ *) out = scale*pow(sum/sumw, 1/p);
    }
}


/**end repeat**/


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// ufunc configuration data.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// These are the input and return dtypes of gmean and hmean.
static char typecodes[] = {
    NPY_FLOAT,      NPY_FLOAT,
    NPY_DOUBLE,     NPY_DOUBLE,
    NPY_LONGDOUBLE, NPY_LONGDOUBLE,
};

static char hmeanw_typecodes[] = {
    NPY_FLOAT,      NPY_FLOAT,      NPY_FLOAT,
    NPY_DOUBLE,     NPY_DOUBLE,     NPY_DOUBLE,
    NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE
};


static char gmeanw_typecodes[] = {
    NPY_FLOAT,      NPY_FLOAT,      NPY_FLOAT,
    NPY_DOUBLE,     NPY_DOUBLE,     NPY_DOUBLE,
    NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE
};

// These are the input and return dtypes of pmean.
static char pmean_typecodes[] = {
    NPY_FLOAT,      NPY_FLOAT,      NPY_FLOAT,
    NPY_DOUBLE,     NPY_DOUBLE,     NPY_DOUBLE,
    NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE,
};

// These are the input and return dtypes of pmeanw.
static char pmeanw_typecodes[] = {
    NPY_FLOAT,      NPY_FLOAT,      NPY_FLOAT,      NPY_FLOAT,
    NPY_DOUBLE,     NPY_DOUBLE,     NPY_DOUBLE,     NPY_DOUBLE,
    NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE,
};

static PyUFuncGenericFunction gmean_funcs[] = {
    (PyUFuncGenericFunction) &gmean_float_loop,
    (PyUFuncGenericFunction) &gmean_double_loop,
    (PyUFuncGenericFunction) &gmean_longdouble_loop
};

#define GMEAN_NTYPES (sizeof(gmean_funcs)/sizeof(gmean_funcs[0]))
static void *gmean_data[GMEAN_NTYPES];

static PyUFuncGenericFunction hmean_funcs[] = {
    (PyUFuncGenericFunction) &hmean_float_loop,
    (PyUFuncGenericFunction) &hmean_double_loop,
    (PyUFuncGenericFunction) &hmean_longdouble_loop
};

#define HMEAN_NTYPES (sizeof(hmean_funcs)/sizeof(hmean_funcs[0]))
static void *hmean_data[HMEAN_NTYPES];


static PyUFuncGenericFunction gmeanw_funcs[] = {
    (PyUFuncGenericFunction) &gmeanw_float_loop,
    (PyUFuncGenericFunction) &gmeanw_double_loop,
    (PyUFuncGenericFunction) &gmeanw_longdouble_loop
};

#define GMEANW_NTYPES (sizeof(gmeanw_funcs)/sizeof(gmeanw_funcs[0]))
static void *gmeanw_data[GMEANW_NTYPES];


static PyUFuncGenericFunction hmeanw_funcs[] = {
    (PyUFuncGenericFunction) &hmeanw_float_loop,
    (PyUFuncGenericFunction) &hmeanw_double_loop,
    (PyUFuncGenericFunction) &hmeanw_longdouble_loop
};

#define HMEANW_NTYPES (sizeof(hmeanw_funcs)/sizeof(hmeanw_funcs[0]))
static void *hmeanw_data[HMEANW_NTYPES];

static PyUFuncGenericFunction pmean_funcs[] = {
    (PyUFuncGenericFunction) &pmean_float_loop,
    (PyUFuncGenericFunction) &pmean_double_loop,
    (PyUFuncGenericFunction) &pmean_longdouble_loop
};

#define PMEAN_NTYPES (sizeof(pmean_funcs)/sizeof(pmean_funcs[0]))
static void *pmean_data[PMEAN_NTYPES];

static PyUFuncGenericFunction pmeanw_funcs[] = {
    (PyUFuncGenericFunction) &pmeanw_float_loop,
    (PyUFuncGenericFunction) &pmeanw_double_loop,
    (PyUFuncGenericFunction) &pmeanw_longdouble_loop
};

#define PMEANW_NTYPES (sizeof(pmeanw_funcs)/sizeof(pmeanw_funcs[0]))
static void *pmeanw_data[PMEANW_NTYPES];


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Python extension module definitions.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

static PyMethodDef MeanMethods[] = {
        {NULL, NULL, 0, NULL}
};

static struct PyModuleDef moduledef = {
    PyModuleDef_HEAD_INIT,
    .m_name = "_means",
    .m_doc = "Module that defines the gmean, hmean and pmean functions.",
    .m_size = -1,
    .m_methods = MeanMethods
};


#define GMEAN_DOCSTRING \
"gmean(x, /, ...)\n"                                                    \
"\n"                                                                    \
"Geometric mean of x.\n"                                                \
"\n"                                                                    \
"The geometric mean of [x1, x2, ..., xn] is (x1*x2*...*xn)**(1/n).\n"   \
"If any value in x is negative, nan is returned.\n"

#define GMEANW_DOCSTRING \
"gmeanw(x, weights, /, ...)\n"                                                \
"\n"                                                                    \
"Weighted geometric mean of x.\n"                                       \
"\n"


#define HMEAN_DOCSTRING \
"hmean(x, /, ...)\n"                                                        \
"\n"                                                                        \
"Harmonic mean of x.\n"                                                     \
"\n"                                                                        \
"The harmonic mean of [x1, x2, ..., xn] is n/(1/x1 + 1/x2 + ... + 1/xn).\n" \
"Typically the function is defined for x > 0, but `hmean` does not\n"       \
"check the values.  Negative values are accepted.\n"                        \
"\n"                                                                        \
"Examples\n"                                                                \
"--------\n"                                                                \
">>> from ufunclab import hmean\n"                                          \
">>> hmean([1.0, 1.2, 2.5, 7.5, 8.0])\n"                                    \
"2.0066889632107023\n"                                                      \
">>> hmean([[2, 14], [7, 9], [3, 12], [7, 8]], axis=1)\n"                   \
"array([3.5       , 7.875     , 4.8       , 7.46666667])\n"                 \
"\n"

#define HMEANW_DOCSTRING \
"hmeanw(x, weights, /, ...)\n"                                             \
"\n"                                                                       \
"Weighted harmonic mean.\n"                                                \
"\n"

#define PMEAN_DOCSTRING \
"pmean(x, p, /, ...)\n"                                                    \
"\n"                                                                       \
"Power mean (aka generalized mean) of x.\n"                                \
"\n"                                                                       \
"The geometric mean of [x1, x2, ..., xn] is (sum(xi**p)/n)**(1/p).\n"      \
"If any value in x is negative, nan is returned.\n"

#define PMEANW_DOCSTRING \
"pmean(x, weights, p, /, ...)\n"                                           \
"\n"                                                                       \
"Weighted power mean (aka weighted generalized mean) of x.\n"              \
"\n"

PyMODINIT_FUNC PyInit__means(void)
{
    PyObject *module;

    module = PyModule_Create(&moduledef);
    if (!module) {
        return NULL;
    }

    import_array();
    import_umath();

    // Create the gmean ufunc.
    if (ul_define_gufunc(module, "gmean", GMEAN_DOCSTRING, "(n)->()",
                         GMEAN_NTYPES,
                         gmean_funcs, gmean_data, typecodes) == NULL) {
        Py_DECREF(module);
        return NULL;
    }

    // Create the gmeanw ufunc.
    if (ul_define_gufunc(module, "gmeanw", GMEANW_DOCSTRING, "(n),(n)->()",
                         GMEANW_NTYPES,
                         gmeanw_funcs, gmeanw_data, gmeanw_typecodes) == NULL) {
        Py_DECREF(module);
        return NULL;
    }

    // Create the hmean ufunc.
    if (ul_define_gufunc(module, "hmean", HMEAN_DOCSTRING, "(n)->()",
                         HMEAN_NTYPES,
                         hmean_funcs, hmean_data, typecodes) == NULL) {
        Py_DECREF(module);
        return NULL;
    }

    // Create the hmeanw ufunc.
    if (ul_define_gufunc(module, "hmeanw", HMEANW_DOCSTRING, "(n),(n)->()",
                         HMEANW_NTYPES,
                         hmeanw_funcs, hmeanw_data, hmeanw_typecodes) == NULL) {
        Py_DECREF(module);
        return NULL;
    }

    // Create the pmean ufunc.
    if (ul_define_gufunc(module, "pmean", PMEAN_DOCSTRING, "(n),()->()",
                         PMEAN_NTYPES,
                         pmean_funcs, pmean_data, pmean_typecodes) == NULL) {
        Py_DECREF(module);
        return NULL;
    }

    // Create the pmeanw ufunc.
    if (ul_define_gufunc(module, "pmeanw", PMEAN_DOCSTRING, "(n),(n),()->()",
                         PMEANW_NTYPES,
                         pmeanw_funcs, pmeanw_data, pmeanw_typecodes) == NULL) {
        Py_DECREF(module);
        return NULL;
    }

    return module;
}
