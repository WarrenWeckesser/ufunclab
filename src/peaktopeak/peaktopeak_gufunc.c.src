//
// peaktopeak_gufunc.c
//

#define PY_SSIZE_T_CLEAN
#include "Python.h"

#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>
#include <math.h>

#define NPY_NO_DEPRECATED_API NPY_API_VERSION

#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// ufunc inner loops for integer and floating point types.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

/**begin repeat
 * #typename      = int8,    int16,    int32,    int64,     uint8,   uint16,   uint32,   uint64,   float, double, longdouble#
 * #ctype_in      = int8_t,  int16_t,  int32_t,  int64_t,   uint8_t, uint16_t, uint32_t, uint64_t, float, double, long double#
 * #ctype_out     = uint8_t, uint16_t, uint32_t, uint64_t,  uint8_t, uint16_t, uint32_t, uint64_t, float, double, long double#
 * #is_signed_int = 1,       1,        1,        1,         0,       0,        0,        0,        0,     0,      0#
 */

#if @is_signed_int@
static inline @ctype_out@ max_diff_@typename@(@ctype_in@ xmax, @ctype_in@ xmin) {
    if ((xmax > 0 && xmin > 0) || (xmax <= 0 && xmin <= 0)) {
        return xmax - xmin;
    }
    else {
        return xmax + (@ctype_out@) (-xmin);
    }
}
#endif

// This function requires n >= 1.
static @ctype_out@
peaktopeak_@typename@_contig(npy_intp n, @ctype_in@ *x)
{
    @ctype_in@ xmin = x[0];
    @ctype_in@ xmax = x[0];
    for (npy_intp i = 1; i < n; ++i) {
        @ctype_in@ xi = x[i];
        xmin = (xi < xmin) ? xi : xmin;
        xmax = (xi > xmax) ? xi : xmax;
    }
#if @is_signed_int@
    return max_diff_@typename@(xmax, xmin);
#else
    return xmax - xmin;
#endif
}

// This loop requires dimensions[1] >= 1 and a contiguous input array
// (i.e. steps[2] == sizeof(<the input data type>))
static void
peaktopeak_@typename@_contig_loop(char **args, const npy_intp *dimensions,
                                  const npy_intp* steps, void* data)
{
    char *in = args[0];
    char *out = args[1];
    npy_intp in_step = steps[0];
    npy_intp out_step = steps[1];
    // npy_intp inner_step = steps[2];

    for (npy_intp i = 0; i < dimensions[0]; ++i, in += in_step, out += out_step) {
        *(@ctype_out@ *) out = peaktopeak_@typename@_contig(dimensions[1], (@ctype_in@ *) in);
    }
}

static void
peaktopeak_@typename@_loop(char **args, const npy_intp *dimensions,
                           const npy_intp* steps, void* data)
{
    char *in = args[0];
    char *out = args[1];
    npy_intp in_step = steps[0];
    npy_intp out_step = steps[1];
    npy_intp inner_step = steps[2];

    if (dimensions[1] == 0) {
        NPY_ALLOW_C_API_DEF
        NPY_ALLOW_C_API
        PyErr_SetString(PyExc_ValueError,
                        "peaktopeak requires an input with length at least 1.");
        NPY_DISABLE_C_API
        return;
    }

    if (inner_step == sizeof(@ctype_in@)) {
        peaktopeak_@typename@_contig_loop(args, dimensions, steps, data);
        return;
    }

    for (npy_intp i = 0; i < dimensions[0]; ++i, in += in_step, out += out_step) {
        char *inner = in;
        @ctype_in@ xmin = *(@ctype_in@ *) inner;
        @ctype_in@ xmax = xmin;
        inner += inner_step;
        for (npy_intp k = 1; k < dimensions[1]; ++k, inner += inner_step) {
            @ctype_in@ x = *(@ctype_in@ *)inner;
            if (x < xmin) {
                xmin = x;
            }
            else if (x > xmax) {
                xmax = x;
            }
        }
#if @is_signed_int@
        *(@ctype_out@ *) out = max_diff_@typename@(xmax, xmin);
#else
        *(@ctype_out@ *) out = xmax - xmin;
#endif
    }
}

/**end repeat**/

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// ufunc inner loop for datetime64 and timedelta64.  Technically, these should
// be the same as the int64 loop above, but that returns an *unsigned* integer
// (uint64_t).  We want peaktopeak applied to an array of datetime64 or
// timedelta64 to return a timedelta64, and there is no unsigned timedelta64.
// This means these loops have the same problem as ptp: if the peak-to-peak
// value exceeds 2**63-1, a negative value is returned.  It is hoped that the
// typical use-cases for these calculations do not encounter this situation.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#ifdef UNDEFINED
XXX Temporarily disabled...

static void peaktopeak_int64_signed_loop(char **args, const npy_intp *dimensions,
                                         const npy_intp* steps, void* data)
{
    char *in = args[0];
    char *out = args[1];
    npy_intp in_step = steps[0];
    npy_intp out_step = steps[1];
    npy_intp inner_step = steps[2];

    if (dimensions[1] == 0) {
        NPY_ALLOW_C_API_DEF
        NPY_ALLOW_C_API
        PyErr_SetString(PyExc_ValueError,
                        "peaktopeak requires an input with length at least 1.");
        NPY_DISABLE_C_API
        return;
    }

    for (npy_intp i = 0; i < dimensions[0]; ++i, in += in_step, out += out_step) {
        char *inner = in;
        int64_t xmin = *(int64_t *) inner;
        int64_t xmax = xmin;
        inner += inner_step;
        for (npy_intp k = 1; k < dimensions[1]; ++k, inner += inner_step) {
            int64_t x = *(int64_t *)inner;
            if (x < xmin) {
                xmin = x;
            }
            else if (x > xmax) {
                xmax = x;
            }
        }
        // Should check for overflow and do something.  For "typical"
        // datetime64s or timedelta64s, we don't expect this subtraction
        // to overflow.
        *(int64_t *) out = xmax - xmin;
    }
}

#endif

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// ufunc inner loop for object arrays.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

static void peaktopeak_object_loop(char **args, const npy_intp *dimensions,
                                   const npy_intp* steps, void* data)
{
    char *in = args[0];
    char *out = args[1];
    npy_intp in_step = steps[0];
    npy_intp out_step = steps[1];
    npy_intp core_in_step = steps[2];

    if (dimensions[1] == 0) {
        PyErr_SetString(PyExc_ValueError,
                        "peaktopeak requires an input with length at least 1.");
        return;
    }

    for (npy_intp i = 0; i < dimensions[0]; ++i, in += in_step, out += out_step) {
        char *inner = in;
        PyObject *xmin = *(PyObject **) inner;
        PyObject *xmax = xmin;
        inner += core_in_step;
        for (npy_intp k = 1; k < dimensions[1]; ++k, inner += core_in_step) {
            PyObject *x = *(PyObject **) inner;
            int lt = PyObject_RichCompareBool(x, xmin, Py_LT);
            if (lt == -1) {
                return;
            }
            if (lt == 1) {
                xmin = x;
            }
            else {
                int gt = PyObject_RichCompareBool(x, xmax, Py_GT);
                if (gt == -1) {
                    return;
                }
                if (gt == 1) {
                    xmax = x;
                }
            }
        }
        Py_INCREF(xmin);
        Py_INCREF(xmax);
        PyObject *diff = PyNumber_Subtract(xmax, xmin);
        Py_DECREF(xmin);
        Py_DECREF(xmax);
        if (diff == NULL) {
            return;
        }
        *((PyObject **) out) = diff;
    }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// ufunc configuration data.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// These are the input and return dtypes of peaktopeak.
// The order of matters!  If the array starts, say,
//    NPY_INT8, NPY_UINT8,
//    NPY_INT16, NPY_UINT16,
//    NPY_INT32, NPY_UINT32,
//    NPY_INT64, NPY_UINT64,
//    NPY_UINT8, NPY_UINT8,
//    ...
// then the result for an input with dtype np.uint8 will
// have dtype np.uint16.
static char peaktopeak_typecodes[] = {
    NPY_INT8, NPY_UINT8,
    NPY_UINT8, NPY_UINT8,
    NPY_INT16, NPY_UINT16,
    NPY_UINT16, NPY_UINT16,
    NPY_INT32, NPY_UINT32,
    NPY_UINT32, NPY_UINT32,
    NPY_INT64, NPY_UINT64,
    NPY_UINT64, NPY_UINT64,
    NPY_FLOAT, NPY_FLOAT,
    NPY_DOUBLE, NPY_DOUBLE,
    NPY_LONGDOUBLE, NPY_LONGDOUBLE,
    //NPY_DATETIME, NPY_TIMEDELTA,
    //NPY_TIMEDELTA, NPY_TIMEDELTA,
    NPY_OBJECT, NPY_OBJECT
};

static PyUFuncGenericFunction peaktopeak_funcs[] = {
    (PyUFuncGenericFunction) &peaktopeak_int8_loop,
    (PyUFuncGenericFunction) &peaktopeak_uint8_loop,
    (PyUFuncGenericFunction) &peaktopeak_int16_loop,
    (PyUFuncGenericFunction) &peaktopeak_uint16_loop,
    (PyUFuncGenericFunction) &peaktopeak_int32_loop,
    (PyUFuncGenericFunction) &peaktopeak_uint32_loop,
    (PyUFuncGenericFunction) &peaktopeak_int64_loop,
    (PyUFuncGenericFunction) &peaktopeak_uint64_loop,
    (PyUFuncGenericFunction) &peaktopeak_float_loop,
    (PyUFuncGenericFunction) &peaktopeak_double_loop,
    (PyUFuncGenericFunction) &peaktopeak_longdouble_loop,
    //(PyUFuncGenericFunction) &peaktopeak_int64_signed_loop,
    //(PyUFuncGenericFunction) &peaktopeak_int64_signed_loop,
    (PyUFuncGenericFunction) &peaktopeak_object_loop
};

#define PEAKTOPEAK_NTYPES (sizeof(peaktopeak_funcs)/sizeof(peaktopeak_funcs[0]))
static void *peaktopeak_data[PEAKTOPEAK_NTYPES];

#ifdef UNDEFINED
XXX Temporarily disabled...

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// peaktopeak type resolver
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

/*
 * Returns a new reference to type if it is already NBO, otherwise
 * returns a copy converted to NBO.
 * *** peaktopeak note: Copied from ufunc_type_resolution.c ***
 */
static PyArray_Descr *
ensure_dtype_nbo(PyArray_Descr *type)
{
    if (PyArray_ISNBO(type->byteorder)) {
        Py_INCREF(type);
        return type;
    }
    else {
        return PyArray_DescrNewByteorder(type, NPY_NATIVE);
    }
}

/*
 * Creates a new NPY_TIMEDELTA dtype, copying the datetime metadata
 * from the given dtype.
 *
 * NOTE: This function is copied from datetime.c in multiarray,
 *       because umath and multiarray are not linked together.
 *
 * *** peaktopeak note: Copied from ufunc_type_resolution.c ***
 */
static PyArray_Descr *
timedelta_dtype_with_copied_meta(PyArray_Descr *dtype)
{
    PyArray_Descr *ret;
    PyArray_DatetimeMetaData *dst, *src;
    PyArray_DatetimeDTypeMetaData *dst_dtmd, *src_dtmd;

    ret = PyArray_DescrNewFromType(NPY_TIMEDELTA);
    if (ret == NULL) {
        return NULL;
    }

    src_dtmd = ((PyArray_DatetimeDTypeMetaData *)dtype->c_metadata);
    dst_dtmd = ((PyArray_DatetimeDTypeMetaData *)ret->c_metadata);
    src = &(src_dtmd->meta);
    dst = &(dst_dtmd->meta);

    *dst = *src;

    return ret;
}


static inline bool
dtype_is_unitless_timedelta(PyArrayObject *op)
{
    if (op != NULL) {
        PyArray_Descr *dtype = PyArray_DESCR(op);
        if (dtype->type_num == NPY_TIMEDELTA) {
            PyArray_DatetimeDTypeMetaData *cmeta =
                (PyArray_DatetimeDTypeMetaData *) (dtype->c_metadata);
            return cmeta->meta.base == NPY_FR_GENERIC;
        }
    }
    return false;
}


static int
PeakToPeakTypeResolver(PyUFuncObject *ufunc,
                       NPY_CASTING casting,
                       PyArrayObject **operands,
                       PyObject *type_tup,
                       PyArray_Descr **out_dtypes)
{
    int type_num;
    int i;

    type_num = PyArray_DESCR(operands[0])->type_num;

    /* Use the default when datetime and timedelta are not involved */
    if (!PyTypeNum_ISDATETIME(type_num)) {
        int ret = PyUFunc_DefaultTypeResolver(ufunc, casting,
                                              operands, type_tup, out_dtypes);
        return ret;
    }

    if (type_num == NPY_TIMEDELTA) {
        out_dtypes[0] = ensure_dtype_nbo(PyArray_DESCR(operands[0]));
        if (out_dtypes[0] == NULL) {
            return -1;
        }
        if (dtype_is_unitless_timedelta(operands[1])) {
            // `out` was given, and it has a unitless timedelta dtype.
            out_dtypes[1] = PyArray_DESCR(operands[1]);
        }
        else {
            out_dtypes[1] = out_dtypes[0];
        }
        Py_INCREF(out_dtypes[1]);
    }
    else if (type_num == NPY_DATETIME) {
        out_dtypes[0] = ensure_dtype_nbo(PyArray_DESCR(operands[0]));
        if (out_dtypes[0] == NULL) {
            return -1;
        }
        if (dtype_is_unitless_timedelta(operands[1])) {
            // `out` was given, and it has a unitless timedelta dtype.
            out_dtypes[1] = PyArray_DESCR(operands[1]);
            Py_INCREF(out_dtypes[1]);
        }
        else {
            /* Make a new NPY_TIMEDELTA, and copy type1's metadata */
            out_dtypes[1] = timedelta_dtype_with_copied_meta(out_dtypes[0]);
            if (out_dtypes[1] == NULL) {
                Py_DECREF(out_dtypes[0]);
                return -1;
            }
        }
    }

    /* Check against the casting rules */
    if (PyUFunc_ValidateCasting(ufunc, casting, operands, out_dtypes) < 0) {
        for (i = 0; i < 2; ++i) {
            Py_DECREF(out_dtypes[i]);
            out_dtypes[i] = NULL;
        }
        return -1;
    }

    return 0;
}

#endif

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Python extension module definitions.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

static PyMethodDef PeakToPeakMethods[] = {
        {NULL, NULL, 0, NULL}
};

static struct PyModuleDef moduledef = {
    PyModuleDef_HEAD_INIT,
    .m_name = "_peaktopeak",
    .m_doc = "Module that defines the peaktopeak function.",
    .m_size = -1,
    .m_methods = PeakToPeakMethods
};


#define PEAKTOPEAK_DOCSTRING                                    \
"peaktopeak(x, /, ...)\n"                                       \
"\n"                                                            \
"Peak-to-peak value (i.e. maximum - minimum) of an array.\n"    \
"\n"                                                            \
"An unsigned integer is returned for signed integer input.\n"


PyMODINIT_FUNC PyInit__peaktopeak(void)
{
    PyObject *module;
    PyUFuncObject *peaktopeak_gufunc;
    int nin, nout;
    int status;

    module = PyModule_Create(&moduledef);
    if (!module) {
        return NULL;
    }

    if (PyArray_ImportNumPyAPI() < 0) {
        return NULL;
    }
    import_umath();

    // Create the peaktopeak ufunc.

    nin = 1;
    nout = 1;
    peaktopeak_gufunc = (PyUFuncObject *) PyUFunc_FromFuncAndDataAndSignature(
                            peaktopeak_funcs,
                            peaktopeak_data,
                            peaktopeak_typecodes,
                            PEAKTOPEAK_NTYPES, nin, nout,
                            PyUFunc_None, "peaktopeak",
                            PEAKTOPEAK_DOCSTRING, 0,
                            "(n)->()");
    if (peaktopeak_gufunc == NULL) {
        Py_DECREF(module);
        return NULL;
    }
    // peaktopeak_gufunc->type_resolver = PeakToPeakTypeResolver;

    status = PyModule_AddObject(module, "peaktopeak", (PyObject *) peaktopeak_gufunc);
    if (status == -1) {
        Py_DECREF(peaktopeak_gufunc);
        Py_DECREF(module);
        return NULL;
    }
    return module;
}
