//
// issnan_gufunc.c.src
//
// ufunc for checking if floating point values are signaling nans.
//

#define PY_SSIZE_T_CLEAN
#include "Python.h"

#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>

#define NPY_NO_DEPRECATED_API NPY_API_VERSION
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"


#define FLOAT16_EXPMASK ((uint16_t) 0x7C00)
#define FLOAT32_EXPMASK ((uint32_t) 0x7F800000ul)
#define FLOAT64_EXPMASK ((uint64_t) 0x7FF0000000000000ull)

#define FLOAT16_EXPANDQUIETNANMASK ((uint16_t) 0x7E00)
#define FLOAT32_EXPANDQUIETNANMASK ((uint32_t) 0x7FC00000ul)
#define FLOAT64_EXPANDQUIETNANMASK ((uint64_t) 0x7FF8000000000000ull)

// These are the payload masks for *signaling* nans, where
// we know the most significant bit in the full payload
// (i.e the "is quiet" bit) is 0.
#define FLOAT16_NANPAYLOADMASK 0x01FF
#define FLOAT32_NANPAYLOADMASK 0x003FFFFFul
#define FLOAT64_NANPAYLOADMASK 0x0007FFFFFFFFFFFFull


// XXX It would be nice to eliminate the copy that is made in
//     these functions while still avoiding the compiler
//     warning about dereferencing a type-punned pointer.

static npy_bool
issnanh(npy_half x)
{
    uint16_t v;
    memcpy(&v, &x, sizeof(v));
    return (((v & FLOAT16_EXPANDQUIETNANMASK) == FLOAT16_EXPMASK)
            && (v & FLOAT16_NANPAYLOADMASK));
}

static npy_bool
issnanf(float x)
{
    uint32_t v;
    memcpy(&v, &x, sizeof(v));
    return (((v & FLOAT32_EXPANDQUIETNANMASK) == FLOAT32_EXPMASK)
            && (v & FLOAT32_NANPAYLOADMASK));
}

static npy_bool
issnan(double x)
{
    uint64_t v;
    memcpy(&v, &x, sizeof(v));
    return (((v & FLOAT64_EXPANDQUIETNANMASK) == FLOAT64_EXPMASK)
            && (v & FLOAT64_NANPAYLOADMASK));
}


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// ufunc inner loops for floating point types.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

/**begin repeat
 * #typename      = half,     float, double #
 * #ctype         = npy_half, float, double #
 * #suffix        = h,        f,            #
 */

static void issnan_@typename@_loop(char **args, const npy_intp *dimensions,
                                   const npy_intp* steps, void* data)
{
    // args[0]: pointer to x array
    // args[1]: pointer to output array
    // dimensions[0]: Length of each array
    // steps[0]:  x array step
    // steps[1]:  output array step
    char *px = args[0];
    char *pout = args[1];
    npy_intp n = dimensions[0];

    for (int j = 0; j < n; ++j, px += steps[0], pout += steps[1]) {
        @ctype@ x = *((@ctype@ *) px);
        *((npy_bool *) pout) = issnan@suffix@(x);
    }
}

/**end repeat**/


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// ufunc configuration data.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// These are the input and return dtypes of deadzone.
static char issnan_codetypes[] = {
    NPY_HALF,   NPY_BOOL,
    NPY_FLOAT,  NPY_BOOL,
    NPY_DOUBLE, NPY_BOOL
};

static PyUFuncGenericFunction issnan_funcs[] = {
    (PyUFuncGenericFunction) &issnan_half_loop,
    (PyUFuncGenericFunction) &issnan_float_loop,
    (PyUFuncGenericFunction) &issnan_double_loop
};

#define ISSNAN_NTYPES (sizeof(issnan_funcs)/sizeof(issnan_funcs[0]))
static void *issnan_data[ISSNAN_NTYPES];


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Python extension module definitions.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

static PyMethodDef IssnanMethods[] = {
        {NULL, NULL, 0, NULL}
};

static struct PyModuleDef moduledef = {
    PyModuleDef_HEAD_INIT,
    .m_name = "_issnan",
    .m_doc = "Module that defines the issnan function.",
    .m_size = -1,
    .m_methods = IssnanMethods
};


#define ISSNAN_DOCSTRING \
"issnan(x, /, ...)\n"                                   \
"\n"                                                    \
"\nTest whether the values in x are signaling nans.\n"  \
"\n"


PyMODINIT_FUNC PyInit__issnan(void)
{
    PyObject *module;
    PyUFuncObject *issnan_gufunc;
    int nin, nout;
    int status;

    module = PyModule_Create(&moduledef);
    if (!module) {
        return NULL;
    }

    if (PyArray_ImportNumPyAPI() < 0) {
        return NULL;
    }
    import_umath();

    // Create the issnan ufunc.
    nin = 1;
    nout = 1;
    issnan_gufunc = (PyUFuncObject *) PyUFunc_FromFuncAndData(
                            issnan_funcs,
                            issnan_data,
                            issnan_codetypes,
                            ISSNAN_NTYPES, nin, nout,
                            PyUFunc_None, "issnan",
                            ISSNAN_DOCSTRING, 0);
    if (issnan_gufunc == NULL) {
        Py_DECREF(module);
        return NULL;
    }
    status = PyModule_AddObject(module, "issnan", (PyObject *) issnan_gufunc);
    if (status == -1) {
        Py_DECREF(issnan_gufunc);
        Py_DECREF(module);
        return NULL;
    }

    return module;
}
